//! `SeaORM` Entity, @generated by sea-orm-codegen 2.0.0-rc.6

use std::collections::HashMap;
use sea_orm::entity::prelude::*;
use sea_orm::{FromJsonQueryResult, Set};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "ARTICLES")]
pub struct Model {
    #[sea_orm(
        column_name = "ID",
        primary_key,
        auto_increment = false,
        column_type = "Text",
    )]
    pub id: String,
    #[sea_orm(column_name = "TIME", column_type = "Text")]
    pub time: String,
    #[sea_orm(column_name = "CONTRIBUTOR", column_type = "Text")]
    pub contributor: String,
    #[sea_orm(column_name = "LINE", column_type = "Text")]
    pub line: String,
    #[sea_orm(column_name = "UNSURE")]
    pub unsure: bool,
    #[sea_orm(column_name = "SENSITIVE")]
    pub sensitive: bool,
    #[sea_orm(column_name = "ATTRIBUTES")]
    pub attributes: Option<AttributeMap>,
}

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, FromJsonQueryResult)]
pub struct AttributeMap(pub HashMap<String, String>);

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
    pub(crate) fn to_active_model(&self) -> ActiveModel {
        ActiveModel {
            id: Set(self.id.clone()),
            time: Set(self.time.clone()),
            contributor: Set(self.contributor.clone()),
            line: Set(self.line.clone()),
            unsure: Set(self.unsure),
            sensitive: Set(self.sensitive),
            attributes: Set(self.attributes.clone()),
        }
    }
}
